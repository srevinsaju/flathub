diff --git a/historietaactivity.py b/historietaactivity.py
index 1d946a4..524ee2a 100644
--- a/historietaactivity.py
+++ b/historietaactivity.py
@@ -22,7 +22,6 @@ from gi.repository import GdkPixbuf
 from sugar3.activity import activity
 from sugar3.graphics.toolbarbox import ToolbarBox, ToolbarButton
 from sugar3.activity.widgets import StopButton
-from sugar3.activity.widgets import ActivityToolbarButton
 from sugar3.graphics.toggletoolbutton import ToggleToolButton
 from sugar3.graphics.toolbutton import ToolButton
 from sugar3.datastore import datastore
@@ -32,6 +31,10 @@ from sugar3.graphics.alert import Alert
 from sugar3.graphics.icon import Icon
 from sugar3.graphics.palette import Palette
 
+from sugarapp.widgets import SugarCompatibleActivity
+from sugarapp.widgets import DesktopSaveChooser
+from sugarapp.widgets import ExtendedActivityToolbarButton
+
 import globos
 import persistencia
 from toolbar import TextToolbar
@@ -98,19 +101,19 @@ class EmptyWidget(Gtk.EventBox):
         self.emit('choose-image')
 
 
-class HistorietaActivity(activity.Activity):
+class HistorietaActivity(SugarCompatibleActivity):
 
     _EXPORT_FORMATS = [['image/png', _('Save as Image'), _('PNG'), ""]]
 
     def __init__(self, handle):
-        activity.Activity.__init__(self, handle)
+        SugarCompatibleActivity.__init__(self, handle)
         self.set_title('FotoToon')
 
         self._max_participants = 1
         self.page = None
 
         toolbar_box = ToolbarBox()
-        activity_button = ActivityToolbarButton(self)
+        activity_button = ExtendedActivityToolbarButton(self)
         activity_toolbar = activity_button.page
         toolbar_box.toolbar.insert(activity_button, 0)
 
@@ -259,7 +262,7 @@ class HistorietaActivity(activity.Activity):
         self._notebook.append_page(self._slideview, None)
         self._notebook.show_all()
 
-        if self._jobject.file_path is None or self._jobject.file_path == '':
+        if not os.path.exists(os.path.join(activity.get_activity_root(), 'autosave')):
             empty_widget = EmptyWidget()
             empty_widget.connect('choose-image', self.__add_image)
             self.set_canvas(empty_widget)
@@ -365,33 +368,10 @@ class HistorietaActivity(activity.Activity):
 
             posi = posi + 1
 
-        temp_file_name = os.path.join(self.get_activity_root(), 'instance',
-                                      'tmp-%i.png' % time.time())
-
-        surface.write_to_png(temp_file_name)
-
-        self.dl_jobject = datastore.create()
-
-        self.dl_jobject.metadata['progress'] = '0'
-        self.dl_jobject.metadata['keep'] = '0'
-        self.dl_jobject.metadata['buddies'] = ''
-        self.dl_jobject.metadata['icon-color'] = \
-            profile.get_color().to_string()
-        self.dl_jobject.metadata['mime_type'] = 'image/png'
-
-        self.dl_jobject.metadata['title'] = \
-            self._jobject.metadata['title'] + " as image"
-        self.dl_jobject.metadata['description'] = ""
-        self.dl_jobject.metadata['progress'] = '100'
-        self.dl_jobject.file_path = temp_file_name
-
-        self.dl_jobject.metadata['preview'] = \
-            self._get_preview_image(temp_file_name)
-
-        datastore.write(self.dl_jobject, transfer_ownership=True)
-        self._object_id = self.dl_jobject.object_id
-        self._show_journal_alert(_('Success'),
-                                 _('A image was created in the Journal'))
+        chooser = DesktopSaveChooser(self, filename=_("Untitled") + '.png')
+        filename = chooser.get_filename()
+        if filename:
+            surface.write_to_png(filename)
 
     def __image_order_cb(self, button):
         reorderwin = ReorderView(self)
@@ -404,9 +384,12 @@ class HistorietaActivity(activity.Activity):
     def _save_as_pdf(self, widget):
         self._commit_all_changes()
 
-        file_name = os.path.join(activity.get_activity_root(), 'instance',
-                                 'tmp-%i.pdf' % time.time())
-        file_obj = open(file_name, 'wb')
+        chooser = DesktopSaveChooser(self, filename=_("Untitled") + '.pdf')
+        filename = chooser.get_filename()
+        if not filename:
+            return
+        
+        file_obj = open(filename, 'wb')
 
         page_width = self.page.boxs[1].width
         page_height = self.page.boxs[1].height
@@ -431,75 +414,48 @@ class HistorietaActivity(activity.Activity):
         surface.finish()
         file_obj.close()
 
-        jobject = datastore.create()
-        jobject.metadata['icon-color'] = \
-            profile.get_color().to_string()
-        jobject.metadata['mime_type'] = 'application/pdf'
-
-        jobject.metadata['title'] = \
-            self.metadata['title'] + " as book"
-        jobject.file_path = file_name
-
-        # jobject.metadata['preview'] = \
-        #    self._get_preview_image(file_name)
-
-        datastore.write(jobject, transfer_ownership=True)
-        self._object_id = jobject.object_id
-
-        self._show_journal_alert(_('Success'),
-                                 _('A PDF was created in the Journal'))
-
     def __save_as_ogg_cb(self, button):
         self._commit_all_changes()
 
-        directory = tempfile.mkdtemp()
-        output_path = os.path.join(directory, 'output.ogv')
+        chooser = DesktopSaveChooser(self, filename=_("Untitled") + '.ogv')
+        output_path = chooser.get_filename()
+        if output_path:
+            directory = tempfile.mkdtemp()
+            output_path = os.path.join(directory, 'output.ogv')
 
-        first_box = self.page.boxs[1]
-        width = first_box.width
-        height = first_box.height
+            first_box = self.page.boxs[1]
+            width = first_box.width
+            height = first_box.height
 
-        framerate = first_box.slideshow_duration
-        if len(self.page.boxs) > 2:
-            for box in self.page.boxs[1:]:
-                framerate = gcd(framerate, box.slideshow_duration)
-        framerate = int(framerate)
+            framerate = first_box.slideshow_duration
+            if len(self.page.boxs) > 2:
+                for box in self.page.boxs[1:]:
+                    framerate = gcd(framerate, box.slideshow_duration)
+            framerate = int(framerate)
 
-        i = 0
-        for box in self.page.boxs[1:]:
-            surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)
-            context = cairo.Context(surface)
-
-            context.set_source_rgb(1.0, 1.0, 1.0)
-            context.paint()
-            box.draw_in_context(context)
-
-            for __ in range(int(box.slideshow_duration // framerate)):
-                path = os.path.join(directory, '{}.png'.format(i))
-                surface.write_to_png(path)
-                i += 1
+            i = 0
+            for box in self.page.boxs[1:]:
+                surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)
+                context = cairo.Context(surface)
 
-        pipeline_string = VIDEO_PIPELINE.format(
-            os.path.join(directory, '%d.png'), framerate, output_path)
-        pipeline = Gst.parse_launch(pipeline_string)
+                context.set_source_rgb(1.0, 1.0, 1.0)
+                context.paint()
+                box.draw_in_context(context)
 
-        pipeline.set_state(Gst.State.PLAYING)
-        pipeline.get_bus().timed_pop_filtered(
-            Gst.CLOCK_TIME_NONE, Gst.MessageType.ERROR | Gst.MessageType.EOS)
-        pipeline.set_state(Gst.State.NULL)
+                for __ in range(int(box.slideshow_duration // framerate)):
+                    path = os.path.join(directory, '{}.png'.format(i))
+                    surface.write_to_png(path)
+                    i += 1
 
-        jobject = datastore.create()
-        jobject.metadata['icon-color'] = profile.get_color().to_string()
-        jobject.metadata['mime_type'] = 'video/ogg'
-        jobject.metadata['title'] = \
-            _('{} as a movie').format(self.metadata['title'])
-        jobject.file_path = output_path
+            pipeline_string = VIDEO_PIPELINE.format(
+                os.path.join(directory, '%d.png'), framerate, output_path)
+            pipeline = Gst.parse_launch(pipeline_string)
 
-        datastore.write(jobject, transfer_ownership=True)
-        self._object_id = jobject.object_id
+            pipeline.set_state(Gst.State.PLAYING)
+            pipeline.get_bus().timed_pop_filtered(
+                Gst.CLOCK_TIME_NONE, Gst.MessageType.ERROR | Gst.MessageType.EOS)
+            pipeline.set_state(Gst.State.NULL)
 
-        self._show_journal_alert(_('Success'),
-                                 _('A movie was saved in the Journal'))
         shutil.rmtree(directory)
 
     def _show_journal_alert(self, title, msg):
diff --git a/toolbar.py b/toolbar.py
index 32407af..e7c8def 100644
--- a/toolbar.py
+++ b/toolbar.py
@@ -31,8 +31,8 @@ from sugar3.graphics.toolcombobox import ToolComboBox
 from sugar3.graphics.palettemenu import PaletteMenuItem
 from sugar3.graphics.palettemenu import PaletteMenuBox
 from sugar3.graphics.colorbutton import ColorToolButton
-from sugar3.graphics.objectchooser import ObjectChooser
-from sugar3.graphics.objectchooser import FILTER_TYPE_GENERIC_MIME
+
+from sugarapp.widgets import DesktopOpenChooser
 
 from fontcombobox import FontComboBox
 from fontcombobox import FontSize
@@ -216,31 +216,16 @@ class GlobesManager():
             self._page.table.remove(last_box)
 
     def add_image(self):
-        try:
-            chooser = ObjectChooser(self._activity, what_filter='Image',
-                                    filter_type=FILTER_TYPE_GENERIC_MIME,
-                                    show_preview=True)
-        except:
-            # for compatibility with older versions
-            chooser = ObjectChooser(self._activity, what_filter='Image')
-
-        try:
-            result = chooser.run()
-            if result == Gtk.ResponseType.ACCEPT:
-                jobject = chooser.get_selected_object()
-                if jobject and jobject.file_path:
-                    logging.debug("imagen seleccionada: %s",
-                                  jobject.file_path)
-                    tempfile_name = \
-                        os.path.join(activity.get_activity_root(),
-                                     'instance', 'tmp%i' % time.time())
-                    os.link(jobject.file_path, tempfile_name)
-                    logging.debug("tempfile_name: %s", tempfile_name)
-                    self._page.add_box_from_journal_image(tempfile_name)
-                jobject.destroy()
-        finally:
-            chooser.destroy()
-            del chooser
+
+        chooser = DesktopOpenChooser(self._activity)
+        chooser.add_filter('.png', 'Portable Network Graphics (.png)')
+        chooser.add_filter('.jpg', 'JPG Images (.jpg)')
+        chooser.add_filter('.jpeg', 'JPG Images (.jpeg)')
+        file_path = chooser.get_filename()
+        if file_path:
+            logging.debug("imagen seleccionada: %s",
+                            file_path)
+            self._page.add_box_from_journal_image(file_path)
 
 
 class TextToolbar(Gtk.Toolbar):
